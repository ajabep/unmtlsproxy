# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master", "main", $default-branch ]
  pull_request:
    branches: [ "master", "main", $default-branch ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  testing:
    outputs:
      cover: ${{ steps.binary.outputs.cover }}
      tests:  ${{ steps.binary.outputs.tests }}
      golangciLint:  ${{ steps.binary.outputs.golangciLint }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - name: "Checkout code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: '1.22'

      - name: Testing...
        run: go test -coverprofile cover.out -v ./... -json >tests.json

      - name: GoLangCi-Lint...
        uses: golangci/golangci-lint-action@v6
        with:
          args: --timeout=30m --issues-exit-code=0 --out-format checkstyle

      - name: Generate binary hashes
        id: binary
        run: |
          set -euo pipefail

          echo "cover=$(cat cover.out | base64 -w0)" >> "$GITHUB_OUTPUT"
          echo "tests=$(echo tests.json | base64 -w0)" >> "$GITHUB_OUTPUT"
          echo "golangciLint=$(echo golangciLint.xml | base64 -w0)" >> "$GITHUB_OUTPUT"


  Analysis:
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Restore the cover and result files
        env:
          COVER_CONTENT: ${{ needs.testing.outputs.cover }}
          TESTS_CONTENT: "${{ needs.testing.outputs.tests }}"
          GOLANGCILINT_CONTENT: "${{ needs.testing.outputs.golangciLint }}"
        run: |
          set -euo pipefail
          echo "$COVER_CONTENT" | base64 -d >cover.out
          echo "$TESTS_CONTENT" | base64 -d >tests.json
          echo "$GOLANGCILINT_CONTENT" | base64 -d >golangciLint.xml

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@383f7e52eae3ab0510c3cb0e7d9d150bbaeab838 # v3.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.go.tests.reportPaths=tests.json
            -Dsonar.go.golangci-lint.reportPaths=golangciLint.xml
